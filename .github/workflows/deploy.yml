name: Deploy

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # gradlew에 대한 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

    ####### EC2 DEPLOY #########
      # 기존의 컨테이너를 중지시킵니다
    - name: docker stop container
      run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 6. 이미지 삭제
    - name: docker rm
      run: sudo docker image rm -f ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

      # 6. 최신 이미지를 풀받습니다
    - name: docker pull
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo

    # 최신 이미지를 컨테이너화하여 실행시킵니다
    - name: docker run new container
      run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
